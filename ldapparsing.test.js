"use strict";
/* global test, expect, Buffer */
/* eslint no-undefined: "off" */
const ldapparsing = require("./ldapparsing.js");

test("dateFormatter_WinNT", () => {
  let testcases = [
    ["132326723493372369", "2020-04-30 00:19:09"],
    ["132252066209257260", "2020-02-03 13:30:20"],
    ["132325322501226687", "2020-04-28 09:24:10"],
    ["132331494933991060", "2020-05-05 12:51:33"],
    ["132253980473557748", "2020-02-05 18:40:47"],
  ];
  for (let [raw, formatted] of testcases) {
    expect(ldapparsing.dateFormatter_WinNT(raw)).toBe(formatted);
  }
});

test("dateFormatter_ADGeneralizedTime", () => {
  let testcases = [
    ["20190607125000.0Z", "2019-06-07 14:50:00"],
    ["20190921193603.0Z", "2019-09-21 21:36:03"],
    ["20190917184453.0Z", "2019-09-17 20:44:53"],
    ["20190901162808.0Z", "2019-09-01 18:28:08"],
    ["20190509135322.0Z", "2019-05-09 15:53:22"],
    ["20200107054932.0Z", "2020-01-07 06:49:32"],
  ];
  for (let [raw, formatted] of testcases) {
    expect(ldapparsing.dateFormatter_ADGeneralizedTime(raw)).toBe(formatted);
  }
});

test("ldapBufferToGuid", () => {
  let testcases = [
    [Buffer.from([0xf6, 0x1b, 0xf0, 0x6e, 0x19, 0xd8, 0x5d, 0x4b, 0x81, 0x8d, 0x0b, 0x3a, 0x8c, 0xd2, 0xc0, 0x96]), "{6EF01BF6-D819-4B5D-818D-0B3A8CD2C096}"],
    [Buffer.from([0xe3, 0xf2, 0x4e, 0xa1, 0xa9, 0x0d, 0xf1, 0x49, 0xa5, 0x50, 0xf3, 0x6e, 0xe7, 0xe7, 0xc3, 0x48]), "{A14EF2E3-0DA9-49F1-A550-F36EE7E7C348}"],
    [Buffer.from([0xe4, 0x30, 0x24, 0xe2, 0x50, 0xe5, 0x5a, 0x4c, 0xa0, 0xb7, 0xa4, 0xb4, 0xdb, 0x9c, 0x35, 0x6e]), "{E22430E4-E550-4C5A-A0B7-A4B4DB9C356E}"],
  ];
  for (let [buffer, formatted] of testcases) {
    expect(ldapparsing.ldapBufferToGuid("blablablah", buffer)).toBe(formatted);
  }
});

function repeatArray(n, arr) {
  let ret = [];
  for (let i = 0; i < n; i++) {
    ret = [...ret, ...arr];
  }
  return ret;
}

test("ldapBufferToSid", () => {
  let testcases = [
    [
      Buffer.from([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x57, 0xcd, 0xea, 0x80, 0xe7, 0x35, 0x45, 0x13, 0x37, 0x6e, 0x52, 0x9d, 0x7b, 0x53, 0x04, 0x00]),
      "S-1-5-21-2162871639-323302887-2639425079-283515",
    ],
    [
      Buffer.from([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x57, 0xcd, 0xea, 0x80, 0xe7, 0x35, 0x45, 0x13, 0x37, 0x6e, 0x52, 0x9d, 0xf5, 0x1e, 0x04, 0x00]),
      "S-1-5-21-2162871639-323302887-2639425079-270069",
    ],
    [
      Buffer.from([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x57, 0xcd, 0xea, 0x80, 0xe7, 0x35, 0x45, 0x13, 0x37, 0x6e, 0x52, 0x9d, 0x5b, 0xc1, 0x04, 0x00]),
      "S-1-5-21-2162871639-323302887-2639425079-311643",
    ],
    [
      Buffer.from([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x39, 0x96, 0x08, 0xf1, 0x37, 0x75, 0x73, 0x64, 0xf7, 0x29, 0xd8, 0xf2, 0x4c, 0x58, 0x06, 0x00]),
      "S-1-5-21-4043871801-1685288247-4074252791-415820",
    ],
    [
      Buffer.from([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x39, 0x96, 0x08, 0xf1, 0x37, 0x75, 0x73, 0x64, 0xf7, 0x29, 0xd8, 0xf2, 0xb7, 0x1e, 0x1c, 0x00]),
      "S-1-5-21-4043871801-1685288247-4074252791-1842871",
    ],
    [
      Buffer.from([0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0x02, 0x01, 0x00, 0x00, 0x01, 0x02, 0x03]),
      `S-1-260-65536-4294967295-${1 * 0x10000 + 2 * 0x100 + 3}-${1 * 0x100 + 2 * 0x10000 + 3 * 0x1000000}`,
    ],
    [Buffer.from([0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, ...repeatArray(255, [0xff, 0xff, 0xff, 0xff])]), "S-1-281474976710655-" + repeatArray(255, ["4294967295"]).join("-")],
  ];
  for (let [buffer, formatted] of testcases) {
    expect(ldapparsing.ldapBufferToSid("blablablah", buffer)).toBe(formatted);
  }
});

test("ldapBufferToGenericOctetString", () => {
  let testcases = [
    [
      Buffer.from([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x57, 0xcd, 0xea, 0x80, 0xe7, 0x35, 0x45, 0x13, 0x37, 0x6e, 0x52, 0x9d, 0x7b, 0x53, 0x04, 0x00]),
      "01 05 00 00 00 00 00 05 15 00 00 00 57 CD EA 80 E7 35 45 13 37 6E 52 9D 7B 53 04 00",
    ],
    [
      Buffer.from([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x39, 0x96, 0x08, 0xf1, 0x37, 0x75, 0x73, 0x64, 0xf7, 0x29, 0xd8, 0xf2, 0xb7, 0x1e, 0x1c, 0x00]),
      "01 05 00 00 00 00 00 05 15 00 00 00 39 96 08 F1 37 75 73 64 F7 29 D8 F2 B7 1E 1C 00",
    ],
  ];
  for (let [buffer, formatted] of testcases) {
    expect(ldapparsing.ldapBufferToGenericOctetString("blablablah", buffer)).toBe(formatted);
  }
});

test("int32", () => {
  let testcases = [
    [undefined, undefined],
    [null, null],
    ["", null],
    [0, 0],
    ["0", 0],
    [1, 1],
    ["1", 1],
    [-1, -1],
    ["-1", -1],
    [2147483647, 2147483647],
    ["2147483647", 2147483647],
    [-2147483648, -2147483648],
    ["-2147483648", -2147483648],
  ];
  for (let [value, formatted] of testcases) {
    expect(ldapparsing.int32(value, NaN)).toBe(formatted);
  }
});
